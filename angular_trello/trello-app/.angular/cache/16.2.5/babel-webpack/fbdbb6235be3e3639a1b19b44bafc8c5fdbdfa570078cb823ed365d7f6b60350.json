{"ast":null,"code":"import { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport { ActionsDialogComponent } from '../actions-dialog/actions-dialog.component';\nimport { NgFor } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../services/card.service\";\nimport * as i3 from \"@angular/material/button\";\nfunction TaskColumnComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 5);\n    i0.ɵɵelement(1, \"app-card\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const card_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"card\", card_r1);\n  }\n}\nexport class TaskColumnComponent {\n  constructor(dialog, cardService) {\n    this.dialog = dialog;\n    this.cardService = cardService;\n    this.dialogConfig = {\n      data: {\n        dialogType: ''\n      }\n    };\n    this.cards = [];\n  }\n  ngOnInit() {\n    this.getCards();\n  }\n  getCards() {\n    this.cardService.getCards().subscribe(response => {\n      this.cards = response.filter(card => card.cardState === this.column?.columnState);\n      console.log(this.cards);\n    }, error => {\n      alert(error.message);\n    });\n  }\n  openDialog(dialogType) {\n    this.dialogConfig.data.dialogType = dialogType;\n    const dialogRef = this.dialog.open(ActionsDialogComponent, this.dialogConfig);\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('Dialog closed with result:', result);\n    });\n  }\n  deleteColumn(columnName) {\n    if (this.column?.columnName === columnName) {\n      //this.columnService.deleteColumn(this.column);\n    } else {\n      console.error('Column is undefined or null.');\n    }\n  }\n  static #_ = this.ɵfac = function TaskColumnComponent_Factory(t) {\n    return new (t || TaskColumnComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.CardService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskColumnComponent,\n    selectors: [[\"app-task-column\"]],\n    inputs: {\n      column: \"column\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 10,\n    vars: 2,\n    consts: [[1, \"task-column\"], [1, \"button-group\"], [\"mat-button\", \"\", 1, \"create-task\", 3, \"click\"], [\"mat-button\", \"\", 1, \"delete-column\", 3, \"click\"], [\"class\", \"cards\", 4, \"ngFor\", \"ngForOf\"], [1, \"cards\"], [3, \"card\"]],\n    template: function TaskColumnComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"nav\")(2, \"h2\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 1)(5, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function TaskColumnComponent_Template_button_click_5_listener() {\n          return ctx.openDialog(\"createCard\");\n        });\n        i0.ɵɵtext(6, \"Add task\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function TaskColumnComponent_Template_button_click_7_listener() {\n          return ctx.deleteColumn((ctx.column == null ? null : ctx.column.columnName) || \"\");\n        });\n        i0.ɵɵtext(8, \"Delete column\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(9, TaskColumnComponent_ng_container_9_Template, 2, 1, \"ng-container\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.column == null ? null : ctx.column.columnName);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.cards);\n      }\n    },\n    dependencies: [MatButtonModule, i3.MatButton, CardComponent, NgFor],\n    styles: [\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  .task-column[_ngcontent-%COMP%] {\\n    height: 100%;\\n    max-width: 400px;\\n    border-right: 1px solid white;\\n    border-left: 1px solid white;\\n}\\n\\n.task-column[_ngcontent-%COMP%]   nav[_ngcontent-%COMP%] {\\n    background-color: darkcyan;\\n    height: 100px;\\n    border-radius: 5px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 0 10px; \\n\\n}\\n\\n.task-column[_ngcontent-%COMP%]   nav[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n    color: white;\\n    white-space: nowrap;\\n    margin: 0; \\n\\n}\\n\\n.button-group[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: flex-end; \\n\\n    margin-top: 10px; \\n\\n}\\n\\n.task-column[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n    font-size: 12px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGFzay1jb2x1bW4vdGFzay1jb2x1bW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F1Qks7O0VBRUg7SUFDRSxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLDZCQUE2QjtJQUM3Qiw0QkFBNEI7QUFDaEM7O0FBRUE7SUFDSSwwQkFBMEI7SUFDMUIsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLG1CQUFtQjtJQUNuQixlQUFlLEVBQUUsa0JBQWtCO0FBQ3ZDOztBQUVBO0lBQ0ksWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixTQUFTLEVBQUUsMEJBQTBCO0FBQ3pDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHlCQUF5QixFQUFFLCtCQUErQjtJQUMxRCxnQkFBZ0IsRUFBRSxzQkFBc0I7QUFDNUM7O0FBRUE7SUFDSSxlQUFlO0FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLyogLnRhc2stY29sdW1uIHtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIG1heC13aWR0aDogNDAwcHg7XHJcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCB3aGl0ZTtcclxuICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgd2hpdGU7XHJcbn1cclxuLnRhc2stY29sdW1uIG5hdiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrY3lhbjtcclxuICAgIGhlaWdodDogMTAwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgXHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcbi50YXNrLWNvbHVtbiBoMiB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbn1cclxuLnRhc2stY29sdW1uIGJ1dHRvbiB7XHJcbiAgICBmb250LXNpemU6IDEycHg7XHJcbiAgfSAqL1xyXG5cclxuICAudGFzay1jb2x1bW4ge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHdoaXRlO1xyXG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB3aGl0ZTtcclxufVxyXG5cclxuLnRhc2stY29sdW1uIG5hdiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrY3lhbjtcclxuICAgIGhlaWdodDogMTAwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDAgMTBweDsgLyogQWRkZWQgcGFkZGluZyAqL1xyXG59XHJcblxyXG4udGFzay1jb2x1bW4gbmF2IGgyIHtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICBtYXJnaW46IDA7IC8qIFJlbW92ZSBkZWZhdWx0IG1hcmdpbiAqL1xyXG59XHJcblxyXG4uYnV0dG9uLWdyb3VwIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOyAvKiBBbGlnbiBidXR0b25zIHRvIHRoZSByaWdodCAqL1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDsgLyogQWRqdXN0IHRvcCBtYXJnaW4gKi9cclxufVxyXG5cclxuLnRhc2stY29sdW1uIGJ1dHRvbiB7XHJcbiAgICBmb250LXNpemU6IDEycHg7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["MatButtonModule","CardComponent","ActionsDialogComponent","NgFor","i0","ɵɵelementContainerStart","ɵɵelement","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","card_r1","TaskColumnComponent","constructor","dialog","cardService","dialogConfig","data","dialogType","cards","ngOnInit","getCards","subscribe","response","filter","card","cardState","column","columnState","console","log","error","alert","message","openDialog","dialogRef","open","afterClosed","result","deleteColumn","columnName","_","ɵɵdirectiveInject","i1","MatDialog","i2","CardService","_2","selectors","inputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","TaskColumnComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","TaskColumnComponent_Template_button_click_5_listener","TaskColumnComponent_Template_button_click_7_listener","ɵɵtemplate","TaskColumnComponent_ng_container_9_Template","ɵɵtextInterpolate","i3","MatButton","styles"],"sources":["C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\task-column\\task-column.component.ts","C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\task-column\\task-column.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport { TaskColumn } from '../models/task-column';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ActionsDialogComponent } from '../actions-dialog/actions-dialog.component';\nimport { CardService } from '../services/card.service';\nimport { Card } from '../models/card';\nimport { NgFor, NgIf } from '@angular/common';\nimport { TaskColumnService } from '../services/task-column.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-task-column',\n  templateUrl: './task-column.component.html',\n  styleUrls: ['./task-column.component.css'],\n  standalone: true,\n  imports: [MatButtonModule, CardComponent, NgFor, NgIf]\n})\nexport class TaskColumnComponent implements OnInit {\n  @Input() column: TaskColumn | undefined;\n  private dialogConfig: MatDialogConfig = {\n    data: {\n      dialogType: ''\n    }\n  };\n\n  cards: Card[] = [];\n\n  constructor(public dialog: MatDialog,\n  private cardService: CardService) {}\n\n  ngOnInit(): void {\n      this.getCards();\n    }\n  \n  public getCards(): void {\n    this.cardService.getCards().subscribe(\n      (response: Card[]) => {\n        this.cards = response.filter(card => card.cardState === this.column?.columnState);\n        console.log(this.cards);\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n    );\n  }\n  \n\n  openDialog(dialogType: string) {\n    this.dialogConfig.data.dialogType = dialogType;\n\n    const dialogRef = this.dialog.open(ActionsDialogComponent, this.dialogConfig);\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('Dialog closed with result:', result);\n    });\n  }\n\n  deleteColumn(columnName: string) {\n    if (this.column?.columnName === columnName) {\n      //this.columnService.deleteColumn(this.column);\n    } else {\n      console.error('Column is undefined or null.');\n    }\n  }\n}","<div class=\"task-column\">\n    <nav>\n        <h2>{{ column?.columnName }}</h2>\n    </nav>\n    <div class=\"button-group\">\n        <button mat-button class=\"create-task\" (click)=\"openDialog('createCard')\">Add task</button>\n        <button mat-button class=\"delete-column\" (click)=\"deleteColumn(column?.columnName || '')\">Delete column</button>\n    </div>\n    <ng-container class=\"cards\" *ngFor=\"let card of cards\">\n        <app-card [card]=\"card\"></app-card>\n    </ng-container>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}