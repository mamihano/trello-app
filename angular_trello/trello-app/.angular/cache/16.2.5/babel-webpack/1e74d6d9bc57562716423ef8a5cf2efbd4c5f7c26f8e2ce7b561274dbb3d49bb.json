{"ast":null,"code":"import { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/task-column.service\";\nimport * as i2 from \"@angular/material/button\";\nfunction TaskColumnComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"nav\")(2, \"h1\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 2);\n    i0.ɵɵtext(5, \"Add task\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(6, \"app-card\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const column_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(column_r1.columnName);\n  }\n}\nexport class TaskColumnComponent {\n  constructor(taskColumnService) {\n    this.taskColumnService = taskColumnService;\n    this.taskColumns = [];\n  }\n  ngOnInit() {\n    this.taskColumns = this.taskColumnService.getTaskColumns();\n  }\n  static #_ = this.ɵfac = function TaskColumnComponent_Factory(t) {\n    return new (t || TaskColumnComponent)(i0.ɵɵdirectiveInject(i1.TaskColumnService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskColumnComponent,\n    selectors: [[\"app-task-column\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"task-column\", 4, \"ngFor\", \"ngForOf\"], [1, \"task-column\"], [\"mat-button\", \"\", 1, \"create-task\"]],\n    template: function TaskColumnComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TaskColumnComponent_div_0_Template, 7, 1, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.taskColumns);\n      }\n    },\n    dependencies: [MatButtonModule, i2.MatButton, CardComponent],\n    styles: [\".task-column[_ngcontent-%COMP%] {\\n    height: 100%;\\n    max-width: 320px;\\n    border-right: 1px solid white;\\n}\\n.task-column[_ngcontent-%COMP%]   nav[_ngcontent-%COMP%] {\\n    background-color: darkcyan;\\n    display: flex;\\n    flex-direction: row;\\n    align-items: center;\\n}\\n.task-column[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\\n    padding: 10px;\\n    margin-top: 10px;\\n    color: white;\\n}\\n.task-column[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n    margin-left: 90px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGFzay1jb2x1bW4vdGFzay1jb2x1bW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsNkJBQTZCO0FBQ2pDO0FBQ0E7SUFDSSwwQkFBMEI7SUFDMUIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLGFBQWE7SUFDYixnQkFBZ0I7SUFDaEIsWUFBWTtBQUNoQjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiLnRhc2stY29sdW1uIHtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIG1heC13aWR0aDogMzIwcHg7XHJcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCB3aGl0ZTtcclxufVxyXG4udGFzay1jb2x1bW4gbmF2IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtjeWFuO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcbi50YXNrLWNvbHVtbiBoMSB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG4udGFzay1jb2x1bW4gYnV0dG9uIHtcclxuICAgIG1hcmdpbi1sZWZ0OiA5MHB4O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["MatButtonModule","CardComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","column_r1","columnName","TaskColumnComponent","constructor","taskColumnService","taskColumns","ngOnInit","getTaskColumns","_","ɵɵdirectiveInject","i1","TaskColumnService","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","TaskColumnComponent_Template","rf","ctx","ɵɵtemplate","TaskColumnComponent_div_0_Template","ɵɵproperty","i2","MatButton","styles"],"sources":["C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\task-column\\task-column.component.ts","C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\task-column\\task-column.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport { TaskColumn } from '../models/task-column';\nimport { TaskColumnService } from '../services/task-column.service';\n\n@Component({\n  selector: 'app-task-column',\n  templateUrl: './task-column.component.html',\n  styleUrls: ['./task-column.component.css'],\n  standalone: true,\n  imports: [MatButtonModule, CardComponent]\n})\nexport class TaskColumnComponent implements OnInit {\n  taskColumns: TaskColumn[] = [];\n  \n  constructor(private taskColumnService: TaskColumnService) {}\n  \n  ngOnInit() {\n      this.taskColumns = this.taskColumnService.getTaskColumns();\n    }\n  }","<div class=\"task-column\" *ngFor=\"let column of taskColumns\">\n    <nav>\n        <h1>{{ column.columnName }}</h1>\n        <button mat-button class=\"create-task\">Add task</button>\n    </nav>\n    <app-card></app-card>\n</div>"],"mappings":"AACA,SAASA,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,aAAa,QAAQ,wBAAwB;;;;;;ICFtDC,EAAA,CAAAC,cAAA,aAA4D;IAEhDD,EAAA,CAAAE,MAAA,GAAuB;IAAAF,EAAA,CAAAG,YAAA,EAAK;IAChCH,EAAA,CAAAC,cAAA,gBAAuC;IAAAD,EAAA,CAAAE,MAAA,eAAQ;IAAAF,EAAA,CAAAG,YAAA,EAAS;IAE5DH,EAAA,CAAAI,SAAA,eAAqB;IACzBJ,EAAA,CAAAG,YAAA,EAAM;;;;IAJMH,EAAA,CAAAK,SAAA,GAAuB;IAAvBL,EAAA,CAAAM,iBAAA,CAAAC,SAAA,CAAAC,UAAA,CAAuB;;;ADWnC,OAAM,MAAOC,mBAAmB;EAG9BC,YAAoBC,iBAAoC;IAApC,KAAAA,iBAAiB,GAAjBA,iBAAiB;IAFrC,KAAAC,WAAW,GAAiB,EAAE;EAE6B;EAE3DC,QAAQA,CAAA;IACJ,IAAI,CAACD,WAAW,GAAG,IAAI,CAACD,iBAAiB,CAACG,cAAc,EAAE;EAC5D;EAAC,QAAAC,CAAA,G;qBAPQN,mBAAmB,EAAAT,EAAA,CAAAgB,iBAAA,CAAAC,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAnBV,mBAAmB;IAAAW,SAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAtB,EAAA,CAAAuB,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCbhC7B,EAAA,CAAA+B,UAAA,IAAAC,kCAAA,iBAMM;;;QANsChC,EAAA,CAAAiC,UAAA,YAAAH,GAAA,CAAAlB,WAAA,CAAc;;;mBDW9Cd,eAAe,EAAAoC,EAAA,CAAAC,SAAA,EAAEpC,aAAa;IAAAqC,MAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}