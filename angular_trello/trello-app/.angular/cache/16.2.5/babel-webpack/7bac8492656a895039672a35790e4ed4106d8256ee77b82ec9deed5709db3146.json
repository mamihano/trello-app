{"ast":null,"code":"import { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport { ActionsDialogComponent } from '../actions-dialog/actions-dialog.component';\nimport { NgFor, NgIf } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../services/card.service\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/forms\";\nfunction TaskColumnComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"h1\", 8);\n    i0.ɵɵtext(2, \"Create new task\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 9)(4, \"form\")(5, \"div\", 10)(6, \"label\", 11);\n    i0.ɵɵtext(7, \"Task name:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"br\");\n    i0.ɵɵelementStart(9, \"input\", 12);\n    i0.ɵɵlistener(\"ngModelChange\", function TaskColumnComponent_div_8_Template_input_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.taskName = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"br\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 10)(12, \"label\", 13);\n    i0.ɵɵtext(13, \"Description:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"br\");\n    i0.ɵɵelementStart(15, \"textarea\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function TaskColumnComponent_div_8_Template_textarea_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.description = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 10)(17, \"label\", 11);\n    i0.ɵɵtext(18, \"Task handler:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(19, \"br\");\n    i0.ɵɵelementStart(20, \"input\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function TaskColumnComponent_div_8_Template_input_ngModelChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.taskHandler = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(21, \"br\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"br\");\n    i0.ɵɵelementStart(23, \"div\", 16)(24, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function TaskColumnComponent_div_8_Template_button_click_24_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.createCard());\n    });\n    i0.ɵɵtext(25, \"Submit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function TaskColumnComponent_div_8_Template_button_click_26_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.cancelForm());\n    });\n    i0.ɵɵtext(27, \"Cancel\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.taskName);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.description);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.taskHandler);\n  }\n}\nfunction TaskColumnComponent_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0, 19);\n    i0.ɵɵelementStart(1, \"app-card\", 20);\n    i0.ɵɵlistener(\"cardDeleted\", function TaskColumnComponent_ng_container_11_Template_app_card_cardDeleted_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onCardDeleted($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const card_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"card\", card_r8);\n  }\n}\nexport class TaskColumnComponent {\n  constructor(dialog, cardService) {\n    this.dialog = dialog;\n    this.cardService = cardService;\n    this.dialogConfig = {\n      data: {\n        dialogType: ''\n      }\n    };\n    this.cards = [];\n    this.showCreateForm = false;\n  }\n  ngOnInit() {\n    this.getCards();\n  }\n  getCards() {\n    this.cardService.getCards().subscribe(response => {\n      this.cards = response.filter(card => card.cardState === this.column?.columnState);\n      console.log(this.cards);\n    }, error => {\n      alert(error.message);\n    });\n  }\n  cancelForm() {\n    this.taskName = '';\n    this.description = '';\n    this.taskHandler = '';\n    this.cardState = undefined;\n    this.showCreateForm = false;\n  }\n  createCard() {\n    const newCard = {\n      cardName: this.taskName,\n      cardDescription: this.description,\n      taskHandler: this.taskHandler,\n      cardState: this.column.columnState\n    };\n    this.cardService.createCard(newCard).subscribe(response => {\n      this.cards.push(response);\n      console.log('Card created successfully:', response);\n    }, error => {\n      console.error('Error creating card:', error);\n    });\n    this.taskName = '';\n    this.description = '';\n    this.taskHandler = '';\n    this.cardState = undefined;\n    this.showCreateForm = false;\n  }\n  onCardDeleted(deletedCard) {\n    this.cards = this.cards.filter(card => card.cardId !== deletedCard.cardId);\n  }\n  openDialog(dialogType) {\n    this.dialogConfig.data.dialogType = dialogType;\n    const dialogRef = this.dialog.open(ActionsDialogComponent, this.dialogConfig);\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('Dialog closed with result:', result);\n    });\n  }\n  deleteColumn(columnName) {\n    if (this.column?.columnName === columnName) {\n      //this.columnService.deleteColumn(this.column);\n    } else {\n      console.error('Column is undefined or null.');\n    }\n  }\n  static #_ = this.ɵfac = function TaskColumnComponent_Factory(t) {\n    return new (t || TaskColumnComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.CardService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskColumnComponent,\n    selectors: [[\"app-task-column\"]],\n    inputs: {\n      column: \"column\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 12,\n    vars: 3,\n    consts: [[1, \"task-column\"], [1, \"column-header\"], [1, \"button-group\"], [\"mat-button\", \"\", 1, \"create-task\", 3, \"click\"], [\"class\", \"create-card-form\", 4, \"ngIf\"], [\"mat-button\", \"\", 1, \"delete-column\", 3, \"click\"], [\"class\", \"cards\", 4, \"ngFor\", \"ngForOf\"], [1, \"create-card-form\"], [\"mat-dialog-title\", \"\", 1, \"dialog-title\"], [\"mat-dialog-content\", \"\", 1, \"form-container\"], [1, \"form-group\"], [\"for\", \"inputField\"], [\"type\", \"text\", \"id\", \"inputField\", \"name\", \"inputField\", \"placeholder\", \"Enter task column name\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"card-description\"], [\"name\", \"card-description\", \"id\", \"card-description\", \"cols\", \"30\", \"rows\", \"10\", 1, \"card-description\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"id\", \"inputField\", \"name\", \"inputField\", \"placeholder\", \"Enter task handler\", 3, \"ngModel\", \"ngModelChange\"], [1, \"form-buttons\"], [\"mat-button\", \"\", 1, \"submit_btn\", 3, \"click\"], [\"mat-button\", \"\", 1, \"cancel_btn\", 3, \"click\"], [1, \"cards\"], [3, \"card\", \"cardDeleted\"]],\n    template: function TaskColumnComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"nav\")(3, \"h2\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"div\", 2)(6, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function TaskColumnComponent_Template_button_click_6_listener() {\n          return ctx.showCreateForm = !ctx.showCreateForm;\n        });\n        i0.ɵɵtext(7, \"Add Task\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, TaskColumnComponent_div_8_Template, 28, 3, \"div\", 4);\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function TaskColumnComponent_Template_button_click_9_listener() {\n          return ctx.deleteColumn((ctx.column == null ? null : ctx.column.columnName) || \"\");\n        });\n        i0.ɵɵtext(10, \"Delete column\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(11, TaskColumnComponent_ng_container_11_Template, 2, 1, \"ng-container\", 6);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.column == null ? null : ctx.column.columnName);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCreateForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.cards);\n      }\n    },\n    dependencies: [MatButtonModule, i3.MatButton, CardComponent, NgFor, NgIf, FormsModule, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n    styles: [\".task-column[_ngcontent-%COMP%] {\\n    height: 100%;\\n    max-width: 400px;\\n    border-right: 1px solid white;\\n    border-left: 1px solid white;\\n}\\n.column-header[_ngcontent-%COMP%] {\\n    background-color: darkcyan;\\n    height: 100px;\\n    border-radius: 5px;\\n}\\n.task-column[_ngcontent-%COMP%]   nav[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 10px 10px;\\n}\\n.task-column[_ngcontent-%COMP%]   nav[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n    color: white;\\n    white-space: nowrap;\\n    margin: 0;\\n}\\n.button-group[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: flex-end;\\n    margin-top: 10px;\\n}\\n.create-card-form[_ngcontent-%COMP%] {\\n    position: fixed;\\n    top: 50%;\\n    left: 50%;\\n    transform: translate(-50%, -50%);\\n    background: whitesmoke;\\n    padding: 20px;\\n    border-radius: 10px;\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\\n    z-index: 999;\\n}\\n.form-container[_ngcontent-%COMP%] {\\n    max-width: 400px;\\n    min-width: 300px;\\n    margin: 0 auto;\\n    padding: 20px;\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    background-color: whitesmoke;\\n    display: flex;\\n    flex-direction: column;\\n}\\n.form-group[_ngcontent-%COMP%] {\\n    margin-bottom: 15px;\\n}\\n.form-group[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n    display: block;\\n    margin-bottom: 5px;\\n}\\n.form-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .form-group[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\n    width: 100%;\\n    padding: 10px;\\n    box-sizing: border-box;\\n}\\n.dialog-title[_ngcontent-%COMP%] {\\n    color: darkcyan;\\n    padding-top: 10px;\\n    text-align: center;\\n}\\n.button-container[_ngcontent-%COMP%] {\\n    display: flex;\\n}\\n.submit_btn[_ngcontent-%COMP%], .cancel_btn[_ngcontent-%COMP%] {\\n      color: black;\\n}\\n.form-buttons[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: flex-end;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGFzay1jb2x1bW4vdGFzay1jb2x1bW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsNkJBQTZCO0lBQzdCLDRCQUE0QjtBQUNoQztBQUNBO0lBQ0ksMEJBQTBCO0lBQzFCLGFBQWE7SUFDYixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsbUJBQW1CO0lBQ25CLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixTQUFTO0FBQ2I7QUFDQTtJQUNJLGFBQWE7SUFDYix5QkFBeUI7SUFDekIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsUUFBUTtJQUNSLFNBQVM7SUFDVCxnQ0FBZ0M7SUFDaEMsc0JBQXNCO0lBQ3RCLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsdUNBQXVDO0lBQ3ZDLFlBQVk7QUFDaEI7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLDRCQUE0QjtJQUM1QixhQUFhO0lBQ2Isc0JBQXNCO0FBQzFCO0FBQ0E7SUFDSSxtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLGNBQWM7SUFDZCxrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLFdBQVc7SUFDWCxhQUFhO0lBQ2Isc0JBQXNCO0FBQzFCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksYUFBYTtBQUNqQjtBQUNBO01BQ00sWUFBWTtBQUNsQjtBQUNBO0lBQ0ksYUFBYTtJQUNiLHlCQUF5QjtBQUM3QiIsInNvdXJjZXNDb250ZW50IjpbIi50YXNrLWNvbHVtbiB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgd2hpdGU7XHJcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHdoaXRlO1xyXG59XHJcbi5jb2x1bW4taGVhZGVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtjeWFuO1xyXG4gICAgaGVpZ2h0OiAxMDBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxufVxyXG4udGFzay1jb2x1bW4gbmF2IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgcGFkZGluZzogMTBweCAxMHB4O1xyXG59XHJcbi50YXNrLWNvbHVtbiBuYXYgaDIge1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICAgIG1hcmdpbjogMDtcclxufVxyXG4uYnV0dG9uLWdyb3VwIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG4uY3JlYXRlLWNhcmQtZm9ybSB7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB0b3A6IDUwJTtcclxuICAgIGxlZnQ6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGVzbW9rZTtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG4gICAgei1pbmRleDogOTk5O1xyXG59XHJcbi5mb3JtLWNvbnRhaW5lciB7XHJcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgbWluLXdpZHRoOiAzMDBweDtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgcGFkZGluZzogMjBweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbn1cclxuLmZvcm0tZ3JvdXAge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcclxufVxyXG4uZm9ybS1ncm91cCBsYWJlbCB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxufVxyXG4uZm9ybS1ncm91cCBpbnB1dCwgLmZvcm0tZ3JvdXAgc2VsZWN0IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuLmRpYWxvZy10aXRsZSB7XHJcbiAgICBjb2xvcjogZGFya2N5YW47XHJcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4uYnV0dG9uLWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG59XHJcbi5zdWJtaXRfYnRuLCAuY2FuY2VsX2J0biB7XHJcbiAgICAgIGNvbG9yOiBibGFjaztcclxufVxyXG4uZm9ybS1idXR0b25zIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["MatButtonModule","CardComponent","ActionsDialogComponent","NgFor","NgIf","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","TaskColumnComponent_div_8_Template_input_ngModelChange_9_listener","$event","ɵɵrestoreView","_r3","ctx_r2","ɵɵnextContext","ɵɵresetView","taskName","TaskColumnComponent_div_8_Template_textarea_ngModelChange_15_listener","ctx_r4","description","TaskColumnComponent_div_8_Template_input_ngModelChange_20_listener","ctx_r5","taskHandler","TaskColumnComponent_div_8_Template_button_click_24_listener","ctx_r6","createCard","TaskColumnComponent_div_8_Template_button_click_26_listener","ctx_r7","cancelForm","ɵɵadvance","ɵɵproperty","ctx_r0","ɵɵelementContainerStart","TaskColumnComponent_ng_container_11_Template_app_card_cardDeleted_1_listener","_r10","ctx_r9","onCardDeleted","ɵɵelementContainerEnd","card_r8","TaskColumnComponent","constructor","dialog","cardService","dialogConfig","data","dialogType","cards","showCreateForm","ngOnInit","getCards","subscribe","response","filter","card","cardState","column","columnState","console","log","error","alert","message","undefined","newCard","cardName","cardDescription","push","deletedCard","cardId","openDialog","dialogRef","open","afterClosed","result","deleteColumn","columnName","_","ɵɵdirectiveInject","i1","MatDialog","i2","CardService","_2","selectors","inputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","TaskColumnComponent_Template","rf","ctx","TaskColumnComponent_Template_button_click_6_listener","ɵɵtemplate","TaskColumnComponent_div_8_Template","TaskColumnComponent_Template_button_click_9_listener","TaskColumnComponent_ng_container_11_Template","ɵɵtextInterpolate","i3","MatButton","i4","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","NgModel","NgForm","styles"],"sources":["C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\task-column\\task-column.component.ts","C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\task-column\\task-column.component.html"],"sourcesContent":["import { Component, Input, NgModule, OnInit } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport { TaskColumn } from '../models/task-column';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ActionsDialogComponent } from '../actions-dialog/actions-dialog.component';\nimport { CardService } from '../services/card.service';\nimport { Card } from '../models/card';\nimport { NgFor, NgIf } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { State } from '../enums/state';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-task-column',\n  templateUrl: './task-column.component.html',\n  styleUrls: ['./task-column.component.css'],\n  standalone: true,\n  imports: [MatButtonModule, CardComponent, NgFor, NgIf, FormsModule]\n})\nexport class TaskColumnComponent implements OnInit {\n  @Input() column: TaskColumn | undefined;\n  private dialogConfig: MatDialogConfig = {\n    data: {\n      dialogType: ''\n    }\n  };\n\n  cards: Card[] = [];\n  showCreateForm = false;\n  taskName!: string;\n  description!: string;\n  taskHandler!: string;\n  cardState?: State;\n\n  constructor(public dialog: MatDialog,\n  private cardService: CardService) {}\n\n  ngOnInit(): void {\n      this.getCards();\n    }\n  \n  public getCards(): void {\n    this.cardService.getCards().subscribe(\n      (response: Card[]) => {\n        this.cards = response.filter(card => card.cardState === this.column?.columnState);\n        console.log(this.cards);\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n    );\n  }\n\n  public cancelForm(): void {\n    this.taskName = '';\n    this.description = '';\n    this.taskHandler = '';\n    this.cardState = undefined;\n    this.showCreateForm = false;\n}\n\n\n  public createCard(): void {\n    const newCard: Card = {\n      cardName: this.taskName,\n      cardDescription: this.description,\n      taskHandler: this.taskHandler,\n      cardState: this.column!.columnState\n    };\n\n    this.cardService.createCard(newCard).subscribe(\n      (response: Card) => {\n        this.cards.push(response);\n        console.log('Card created successfully:', response);\n      },\n      (error) => {\n        console.error('Error creating card:', error);\n      }\n    );\n\n    this.taskName = '';\n    this.description = '';\n    this.taskHandler = '';\n    this.cardState = undefined;\n    this.showCreateForm = false;\n  }\n\n  onCardDeleted(deletedCard: Card): void {\n    this.cards = this.cards.filter(card => card.cardId !== deletedCard.cardId);\n  }\n\n  openDialog(dialogType: string) {\n    this.dialogConfig.data.dialogType = dialogType;\n\n    const dialogRef = this.dialog.open(ActionsDialogComponent, this.dialogConfig);\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('Dialog closed with result:', result);\n    });\n  }\n\n  deleteColumn(columnName: string) {\n    if (this.column?.columnName === columnName) {\n      //this.columnService.deleteColumn(this.column);\n    } else {\n      console.error('Column is undefined or null.');\n    }\n  }\n}","<div class=\"task-column\">\n    <div class=\"column-header\">\n        <nav>\n            <h2>{{ column?.columnName }}</h2>\n        </nav>\n        <div class=\"button-group\">\n            <button mat-button class=\"create-task\" (click)=\"showCreateForm = !showCreateForm\">Add Task</button>\n            <div class=\"create-card-form\" *ngIf=\"showCreateForm\">\n                <h1 mat-dialog-title class=\"dialog-title\">Create new task</h1>\n                <div mat-dialog-content class=\"form-container\">\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"inputField\">Task name:</label><br>\n                            <input type=\"text\" id=\"inputField\" name=\"inputField\" placeholder=\"Enter task column name\" [(ngModel)]=\"taskName\"><br>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"card-description\">Description:</label><br>\n                            <textarea name=\"card-description\" id=\"card-description\" cols=\"30\" rows=\"10\" class=\"card-description\" [(ngModel)]=\"description\"></textarea>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"inputField\">Task handler:</label><br>\n                            <input type=\"text\" id=\"inputField\" name=\"inputField\" placeholder=\"Enter task handler\" [(ngModel)]=\"taskHandler\"><br>\n                        </div><br>\n                        <div class=\"form-buttons\">\n                            <button mat-button class=\"submit_btn\" (click)=\"createCard()\">Submit</button>\n                            <button mat-button class=\"cancel_btn\" (click)=\"cancelForm()\">Cancel</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <button mat-button class=\"delete-column\" (click)=\"deleteColumn(column?.columnName || '')\">Delete column</button>\n        </div>\n    </div>\n    <ng-container class=\"cards\" *ngFor=\"let card of cards\">\n        <app-card [card]=\"card\" (cardDeleted)=\"onCardDeleted($event)\"></app-card>\n    </ng-container>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}