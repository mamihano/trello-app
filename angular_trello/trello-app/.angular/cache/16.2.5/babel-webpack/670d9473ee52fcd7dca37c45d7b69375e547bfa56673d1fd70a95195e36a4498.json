{"ast":null,"code":"import { State } from '../enums/state';\nimport * as i0 from \"@angular/core\";\nexport class CardService {\n  constructor() {\n    this.cardList = [{\n      cardName: \"Water plants\",\n      cardDescription: `Water all plants in garden. Tomatoes need half liter of water per plant every two days.\n    Cucumbers need 1 liter of water every day. Paprika needs 1 liter of water every 3 days.`,\n      cardState: State.TO_DO,\n      taskHandler: \"Marin\"\n    }, {\n      cardName: \"Shorten lawn\",\n      cardDescription: `Shorten lawn to half inch length. Use electric trimmer and after that water lawn.`,\n      cardState: State.TO_DO,\n      taskHandler: \"Dinka\"\n    }, {\n      cardName: \"Clean house\",\n      cardDescription: `Vacuum all the floors and wipe the dust from the furniture. Wash windows and shutters.`,\n      cardState: State.DONE,\n      taskHandler: \"Dinka\"\n    }, {\n      cardName: \"Prepare launch\",\n      cardDescription: `Go for groceries in market. Prepare all vegetables for soup and put meat in the owen.`,\n      cardState: State.IN_PROGRESS,\n      taskHandler: \"Marin\"\n    }];\n  }\n  getCards() {\n    return this.cardList;\n  }\n  deleteCard(card) {\n    const index = this.cardList.indexOf(card);\n    if (index !== -1) {\n      this.cardList.splice(index, 1);\n    }\n  }\n  static #_ = this.ɵfac = function CardService_Factory(t) {\n    return new (t || CardService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CardService,\n    factory: CardService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["State","CardService","constructor","cardList","cardName","cardDescription","cardState","TO_DO","taskHandler","DONE","IN_PROGRESS","getCards","deleteCard","card","index","indexOf","splice","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\services\\card.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Card } from '../models/card';\nimport { State } from '../enums/state';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CardService {\n  constructor() { }\n\n  private cardList: Card[] = [\n    {cardName: \"Water plants\", cardDescription: `Water all plants in garden. Tomatoes need half liter of water per plant every two days.\n    Cucumbers need 1 liter of water every day. Paprika needs 1 liter of water every 3 days.`, cardState: State.TO_DO, taskHandler: \"Marin\"},\n    {cardName: \"Shorten lawn\", cardDescription: `Shorten lawn to half inch length. Use electric trimmer and after that water lawn.`,\n     cardState: State.TO_DO, taskHandler: \"Dinka\"},\n    {cardName: \"Clean house\", cardDescription: `Vacuum all the floors and wipe the dust from the furniture. Wash windows and shutters.`,\n     cardState: State.DONE, taskHandler: \"Dinka\"},\n    {cardName: \"Prepare launch\", cardDescription: `Go for groceries in market. Prepare all vegetables for soup and put meat in the owen.`,\n     cardState: State.IN_PROGRESS, taskHandler: \"Marin\"}\n  ];\n\n  getCards(): Card[] {\n    return this.cardList;\n  }\n\n  deleteCard(card: Card): void {\n    const index = this.cardList.indexOf(card);\n    if (index !== -1) {\n      this.cardList.splice(index, 1);\n    }\n  }\n}\n"],"mappings":"AAEA,SAASA,KAAK,QAAQ,gBAAgB;;AAKtC,OAAM,MAAOC,WAAW;EACtBC,YAAA;IAEQ,KAAAC,QAAQ,GAAW,CACzB;MAACC,QAAQ,EAAE,cAAc;MAAEC,eAAe,EAAE;4FAC4C;MAAEC,SAAS,EAAEN,KAAK,CAACO,KAAK;MAAEC,WAAW,EAAE;IAAO,CAAC,EACvI;MAACJ,QAAQ,EAAE,cAAc;MAAEC,eAAe,EAAE,mFAAmF;MAC9HC,SAAS,EAAEN,KAAK,CAACO,KAAK;MAAEC,WAAW,EAAE;IAAO,CAAC,EAC9C;MAACJ,QAAQ,EAAE,aAAa;MAAEC,eAAe,EAAE,wFAAwF;MAClIC,SAAS,EAAEN,KAAK,CAACS,IAAI;MAAED,WAAW,EAAE;IAAO,CAAC,EAC7C;MAACJ,QAAQ,EAAE,gBAAgB;MAAEC,eAAe,EAAE,uFAAuF;MACpIC,SAAS,EAAEN,KAAK,CAACU,WAAW;MAAEF,WAAW,EAAE;IAAO,CAAC,CACrD;EAXe;EAahBG,QAAQA,CAAA;IACN,OAAO,IAAI,CAACR,QAAQ;EACtB;EAEAS,UAAUA,CAACC,IAAU;IACnB,MAAMC,KAAK,GAAG,IAAI,CAACX,QAAQ,CAACY,OAAO,CAACF,IAAI,CAAC;IACzC,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACX,QAAQ,CAACa,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAElC;EAAC,QAAAG,CAAA,G;qBAvBUhB,WAAW;EAAA;EAAA,QAAAiB,EAAA,G;WAAXjB,WAAW;IAAAkB,OAAA,EAAXlB,WAAW,CAAAmB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}