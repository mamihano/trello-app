{"ast":null,"code":"import { State } from '../enums/state';\nimport * as i0 from \"@angular/core\";\nexport class TaskColumnService {\n  constructor() {\n    this.taskColumnList = [{\n      columnName: \"To-Do List\",\n      columnState: State.TO_DO\n    }, {\n      columnName: \"In Progress\",\n      columnState: State.IN_PROGRESS\n    }, {\n      columnName: \"Work done\",\n      columnState: State.DONE\n    }];\n  }\n  getTaskColumns() {\n    console.log(\"task columns\");\n    return this.taskColumnList;\n  }\n  deleteColumn(column) {\n    const index = this.taskColumnList.indexOf(column);\n    if (index !== -1) {\n      this.taskColumnList.splice(index, 1);\n    }\n  }\n  static #_ = this.ɵfac = function TaskColumnService_Factory(t) {\n    return new (t || TaskColumnService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskColumnService,\n    factory: TaskColumnService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["State","TaskColumnService","constructor","taskColumnList","columnName","columnState","TO_DO","IN_PROGRESS","DONE","getTaskColumns","console","log","deleteColumn","column","index","indexOf","splice","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\services\\task-column.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { TaskColumn } from '../models/task-column';\nimport { State } from '../enums/state';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskColumnService {\n  constructor() { }\n\n  private taskColumnList: TaskColumn[] = [\n    {columnName: \"To-Do List\", columnState: State.TO_DO},\n    {columnName: \"In Progress\", columnState: State.IN_PROGRESS},\n    {columnName: \"Work done\", columnState: State.DONE}\n  ];\n\n  getTaskColumns(): TaskColumn[] {\n    console.log(\"task columns\")\n    return this.taskColumnList;\n  }\n\n  deleteColumn(column: TaskColumn): void {\n    const index = this.taskColumnList.indexOf(column);\n    if (index !== -1) {\n      this.taskColumnList.splice(index, 1);\n    }\n  }\n}\n"],"mappings":"AAEA,SAASA,KAAK,QAAQ,gBAAgB;;AAKtC,OAAM,MAAOC,iBAAiB;EAC5BC,YAAA;IAEQ,KAAAC,cAAc,GAAiB,CACrC;MAACC,UAAU,EAAE,YAAY;MAAEC,WAAW,EAAEL,KAAK,CAACM;IAAK,CAAC,EACpD;MAACF,UAAU,EAAE,aAAa;MAAEC,WAAW,EAAEL,KAAK,CAACO;IAAW,CAAC,EAC3D;MAACH,UAAU,EAAE,WAAW;MAAEC,WAAW,EAAEL,KAAK,CAACQ;IAAI,CAAC,CACnD;EANe;EAQhBC,cAAcA,CAAA;IACZC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B,OAAO,IAAI,CAACR,cAAc;EAC5B;EAEAS,YAAYA,CAACC,MAAkB;IAC7B,MAAMC,KAAK,GAAG,IAAI,CAACX,cAAc,CAACY,OAAO,CAACF,MAAM,CAAC;IACjD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACX,cAAc,CAACa,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAExC;EAAC,QAAAG,CAAA,G;qBAnBUhB,iBAAiB;EAAA;EAAA,QAAAiB,EAAA,G;WAAjBjB,iBAAiB;IAAAkB,OAAA,EAAjBlB,iBAAiB,CAAAmB,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}