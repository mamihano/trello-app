{"ast":null,"code":"import { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport { ActionsDialogComponent } from '../actions-dialog/actions-dialog.component';\nimport { NgFor } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../services/card.service\";\nimport * as i3 from \"../services/task-column.service\";\nimport * as i4 from \"@angular/material/button\";\nfunction TaskColumnComponent_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 4);\n    i0.ɵɵelement(1, \"app-card\", 5);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const card_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"card\", card_r1);\n  }\n}\nexport class TaskColumnComponent {\n  constructor(dialog, cardService, columnService) {\n    this.dialog = dialog;\n    this.cardService = cardService;\n    this.columnService = columnService;\n    this.dialogConfig = {\n      data: {\n        dialogType: ''\n      }\n    };\n    this.cards = [];\n  }\n  ngOnInit() {\n    //this.cards = this.cardService.getCards();\n    console.log(\"cards\");\n    console.log(this.cards);\n  }\n  openDialog(dialogType) {\n    this.dialogConfig.data.dialogType = dialogType;\n    const dialogRef = this.dialog.open(ActionsDialogComponent, this.dialogConfig);\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('Dialog closed with result:', result);\n    });\n  }\n  deleteColumn(columnName) {\n    if (this.column?.columnName === columnName) {\n      this.columnService.deleteColumn(this.column);\n    } else {\n      console.error('Column is undefined or null.');\n    }\n  }\n  static #_ = this.ɵfac = function TaskColumnComponent_Factory(t) {\n    return new (t || TaskColumnComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.CardService), i0.ɵɵdirectiveInject(i3.TaskColumnService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskColumnComponent,\n    selectors: [[\"app-task-column\"]],\n    inputs: {\n      column: \"column\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 9,\n    vars: 2,\n    consts: [[1, \"task-column\"], [\"mat-button\", \"\", 1, \"create-task\", 3, \"click\"], [\"mat-button\", \"\", 1, \"delete-column\", 3, \"click\"], [\"class\", \"cards\", 4, \"ngFor\", \"ngForOf\"], [1, \"cards\"], [3, \"card\"]],\n    template: function TaskColumnComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"nav\")(2, \"h2\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function TaskColumnComponent_Template_button_click_4_listener() {\n          return ctx.openDialog(\"createCard\");\n        });\n        i0.ɵɵtext(5, \"Add task\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function TaskColumnComponent_Template_button_click_6_listener() {\n          return ctx.deleteColumn((ctx.column == null ? null : ctx.column.columnName) || \"\");\n        });\n        i0.ɵɵtext(7, \"Delete column\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(8, TaskColumnComponent_ng_container_8_Template, 2, 1, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.column == null ? null : ctx.column.columnName);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.cards);\n      }\n    },\n    dependencies: [MatButtonModule, i4.MatButton, CardComponent, NgFor],\n    styles: [\".task-column[_ngcontent-%COMP%] {\\n    height: 100%;\\n    max-width: 400px;\\n    border-right: 1px solid white;\\n    border-left: 1px solid white;\\n}\\n.task-column[_ngcontent-%COMP%]   nav[_ngcontent-%COMP%] {\\n    background-color: darkcyan;\\n    height: 100px;\\n    border-radius: 5px;\\n    display: flex;\\n    flex-direction: row;\\n    justify-content: space-between; \\n    align-items: center;\\n}\\n.task-column[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n    padding: 10px;\\n    margin-top: 10px;\\n    color: white;\\n    white-space: nowrap;\\n}\\n.task-column[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n    font-size: 12px;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGFzay1jb2x1bW4vdGFzay1jb2x1bW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsNkJBQTZCO0lBQzdCLDRCQUE0QjtBQUNoQztBQUNBO0lBQ0ksMEJBQTBCO0lBQzFCLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQiw4QkFBOEI7SUFDOUIsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLGVBQWU7RUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyIudGFzay1jb2x1bW4ge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHdoaXRlO1xyXG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB3aGl0ZTtcclxufVxyXG4udGFzay1jb2x1bW4gbmF2IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtjeWFuO1xyXG4gICAgaGVpZ2h0OiAxMDBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyBcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuLnRhc2stY29sdW1uIGgyIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxufVxyXG4udGFzay1jb2x1bW4gYnV0dG9uIHtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["MatButtonModule","CardComponent","ActionsDialogComponent","NgFor","i0","ɵɵelementContainerStart","ɵɵelement","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","card_r1","TaskColumnComponent","constructor","dialog","cardService","columnService","dialogConfig","data","dialogType","cards","ngOnInit","console","log","openDialog","dialogRef","open","afterClosed","subscribe","result","deleteColumn","columnName","column","error","_","ɵɵdirectiveInject","i1","MatDialog","i2","CardService","i3","TaskColumnService","_2","selectors","inputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","TaskColumnComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","TaskColumnComponent_Template_button_click_4_listener","TaskColumnComponent_Template_button_click_6_listener","ɵɵtemplate","TaskColumnComponent_ng_container_8_Template","ɵɵtextInterpolate","i4","MatButton","styles"],"sources":["C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\task-column\\task-column.component.ts","C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\task-column\\task-column.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport { TaskColumn } from '../models/task-column';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ActionsDialogComponent } from '../actions-dialog/actions-dialog.component';\nimport { CardService } from '../services/card.service';\nimport { Card } from '../models/card';\nimport { NgFor, NgIf } from '@angular/common';\nimport { TaskColumnService } from '../services/task-column.service';\n\n@Component({\n  selector: 'app-task-column',\n  templateUrl: './task-column.component.html',\n  styleUrls: ['./task-column.component.css'],\n  standalone: true,\n  imports: [MatButtonModule, CardComponent, NgFor, NgIf]\n})\nexport class TaskColumnComponent implements OnInit {\n  @Input() column: TaskColumn | undefined;\n  private dialogConfig: MatDialogConfig = {\n    data: {\n      dialogType: ''\n    }\n  };\n\n  cards: Card[] = [];\n\n  constructor(public dialog: MatDialog,\n    private cardService: CardService,\n    private columnService: TaskColumnService) {}\n\n  ngOnInit(): void {\n    //this.cards = this.cardService.getCards();\n    console.log(\"cards\");\n    console.log(this.cards)\n  }\n\n  openDialog(dialogType: string) {\n    this.dialogConfig.data.dialogType = dialogType;\n\n    const dialogRef = this.dialog.open(ActionsDialogComponent, this.dialogConfig);\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('Dialog closed with result:', result);\n    });\n  }\n\n  deleteColumn(columnName: string) {\n    if (this.column?.columnName === columnName) {\n      this.columnService.deleteColumn(this.column);\n    } else {\n      console.error('Column is undefined or null.');\n    }\n  }\n}","<div class=\"task-column\">\n    <nav>\n        <h2>{{ column?.columnName }}</h2>\n        <button mat-button class=\"create-task\" (click)=\"openDialog('createCard')\">Add task</button>\n        <button mat-button class=\"delete-column\" (click)=\"deleteColumn(column?.columnName || '')\">Delete column</button>\n    </nav>\n    <ng-container class=\"cards\" *ngFor=\"let card of cards\">\n        <app-card [card]=\"card\"\n         ></app-card>\n         <!-- <app-card [card]=\"card\"\n         *ngIf=\"card?.cardState === column?.columnState\"\n         ></app-card> -->\n    </ng-container>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}