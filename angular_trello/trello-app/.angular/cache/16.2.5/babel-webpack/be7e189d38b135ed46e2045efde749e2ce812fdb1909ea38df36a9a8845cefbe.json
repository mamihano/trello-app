{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport { ActionsDialogComponent } from '../actions-dialog/actions-dialog.component';\nimport { NgFor, NgIf } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nexport let TaskColumnComponent = class TaskColumnComponent {\n  constructor(dialog, cardService) {\n    this.dialog = dialog;\n    this.cardService = cardService;\n    this.dialogConfig = {\n      data: {\n        dialogType: ''\n      }\n    };\n    this.cards = [];\n    this.showCreateForm = false;\n  }\n  ngOnInit() {\n    this.getCards();\n  }\n  getCards() {\n    this.cardService.getCards().subscribe(response => {\n      this.cards = response.filter(card => card.cardState === this.column?.columnState);\n      console.log(this.cards);\n    }, error => {\n      alert(error.message);\n    });\n  }\n  cancelForm() {\n    this.taskName = '';\n    this.description = '';\n    this.taskHandler = '';\n    this.cardState = undefined;\n    this.showCreateForm = false;\n  }\n  createCard() {\n    const newCard = {\n      cardName: this.taskName,\n      cardDescription: this.description,\n      taskHandler: this.taskHandler,\n      cardState: this.column.columnState\n    };\n    this.cardService.createCard(newCard).subscribe(response => {\n      this.cards.push(response);\n      console.log('Card created successfully:', response);\n    }, error => {\n      console.error('Error creating card:', error);\n    });\n    this.taskName = '';\n    this.description = '';\n    this.taskHandler = '';\n    this.cardState = undefined;\n    this.showCreateForm = false;\n  }\n  onCardDeleted(deletedCard) {\n    this.cards = this.cards.filter(card => card.cardId !== deletedCard.cardId);\n  }\n  openDialog(dialogType) {\n    this.dialogConfig.data.dialogType = dialogType;\n    const dialogRef = this.dialog.open(ActionsDialogComponent, this.dialogConfig);\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('Dialog closed with result:', result);\n    });\n  }\n  deleteColumn(columnName) {\n    if (this.column?.columnName === columnName) {\n      //this.columnService.deleteColumn(this.column);\n    } else {\n      console.error('Column is undefined or null.');\n    }\n  }\n};\n__decorate([Input()], TaskColumnComponent.prototype, \"column\", void 0);\nTaskColumnComponent = __decorate([Component({\n  selector: 'app-task-column',\n  templateUrl: './task-column.component.html',\n  styleUrls: ['./task-column.component.css'],\n  standalone: true,\n  imports: [MatButtonModule, CardComponent, NgFor, NgIf, FormsModule, NgModule]\n})], TaskColumnComponent);","map":{"version":3,"names":["Component","Input","NgModule","MatButtonModule","CardComponent","ActionsDialogComponent","NgFor","NgIf","FormsModule","TaskColumnComponent","constructor","dialog","cardService","dialogConfig","data","dialogType","cards","showCreateForm","ngOnInit","getCards","subscribe","response","filter","card","cardState","column","columnState","console","log","error","alert","message","cancelForm","taskName","description","taskHandler","undefined","createCard","newCard","cardName","cardDescription","push","onCardDeleted","deletedCard","cardId","openDialog","dialogRef","open","afterClosed","result","deleteColumn","columnName","__decorate","selector","templateUrl","styleUrls","standalone","imports"],"sources":["C:\\Users\\Mihanovic\\Desktop\\SpringBoot\\angular_trello\\trello-app\\src\\app\\task-column\\task-column.component.ts"],"sourcesContent":["import { Component, Input, NgModule, OnInit } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CardComponent } from '../card/card.component';\nimport { TaskColumn } from '../models/task-column';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ActionsDialogComponent } from '../actions-dialog/actions-dialog.component';\nimport { CardService } from '../services/card.service';\nimport { Card } from '../models/card';\nimport { NgFor, NgIf } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { State } from '../enums/state';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-task-column',\n  templateUrl: './task-column.component.html',\n  styleUrls: ['./task-column.component.css'],\n  standalone: true,\n  imports: [MatButtonModule, CardComponent, NgFor, NgIf, FormsModule, NgModule]\n})\nexport class TaskColumnComponent implements OnInit {\n  @Input() column: TaskColumn | undefined;\n  private dialogConfig: MatDialogConfig = {\n    data: {\n      dialogType: ''\n    }\n  };\n\n  cards: Card[] = [];\n  showCreateForm = false;\n  taskName!: string;\n  description!: string;\n  taskHandler!: string;\n  cardState?: State;\n\n  constructor(public dialog: MatDialog,\n  private cardService: CardService) {}\n\n  ngOnInit(): void {\n      this.getCards();\n    }\n  \n  public getCards(): void {\n    this.cardService.getCards().subscribe(\n      (response: Card[]) => {\n        this.cards = response.filter(card => card.cardState === this.column?.columnState);\n        console.log(this.cards);\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n    );\n  }\n\n  public cancelForm(): void {\n    this.taskName = '';\n    this.description = '';\n    this.taskHandler = '';\n    this.cardState = undefined;\n    this.showCreateForm = false;\n}\n\n\n  public createCard(): void {\n    const newCard: Card = {\n      cardName: this.taskName,\n      cardDescription: this.description,\n      taskHandler: this.taskHandler,\n      cardState: this.column!.columnState\n    };\n\n    this.cardService.createCard(newCard).subscribe(\n      (response: Card) => {\n        this.cards.push(response);\n        console.log('Card created successfully:', response);\n      },\n      (error) => {\n        console.error('Error creating card:', error);\n      }\n    );\n\n    this.taskName = '';\n    this.description = '';\n    this.taskHandler = '';\n    this.cardState = undefined;\n    this.showCreateForm = false;\n  }\n\n  onCardDeleted(deletedCard: Card): void {\n    this.cards = this.cards.filter(card => card.cardId !== deletedCard.cardId);\n  }\n\n  openDialog(dialogType: string) {\n    this.dialogConfig.data.dialogType = dialogType;\n\n    const dialogRef = this.dialog.open(ActionsDialogComponent, this.dialogConfig);\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('Dialog closed with result:', result);\n    });\n  }\n\n  deleteColumn(columnName: string) {\n    if (this.column?.columnName === columnName) {\n      //this.columnService.deleteColumn(this.column);\n    } else {\n      console.error('Column is undefined or null.');\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}